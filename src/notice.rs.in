use serde_json;

use std::error::Error;
use config::Config;

const NOTIFIER_NAME: &'static str = "airbrake-rust";
const NOTIFIER_URL: &'static str = "https://github.com/airbrake/airbrake-rust";

#[derive(Debug, Serialize)]
pub struct Notice {
    pub errors: Vec<AirbrakeError>,
    pub context: Context,
}

#[derive(Debug, Serialize)]
pub struct Context {
    pub version: String,
    notifier: NotifierPayload,
    root_directory: String,
}

#[derive(Debug, Serialize)]
pub struct NotifierPayload {
    name: String,
    version: String,
    url: String,
}

#[derive(Debug, Serialize)]
pub struct AirbrakeError {
    #[serde(rename="type")]
    pub type_: String,
    pub message: String,
    pub backtrace: Vec<String>,
}

impl Notice {
    pub fn new<E: Error>(config: &Config, error: E) -> Notice {
        Notice {
            errors: vec![
                AirbrakeError {
                    type_: format!("{:?}", error).split_whitespace().next().unwrap().to_owned(),
                    message: format!("{}", error),
                    backtrace: vec!["foo/bar/baz.rs".to_owned()],
                }
            ],
            context: Context {
                notifier: NotifierPayload {
                    name: NOTIFIER_NAME.to_owned(),
                    version: env!("CARGO_PKG_VERSION").to_owned(),
                    url: NOTIFIER_URL.to_owned(),
                },
                version: config.app_version.clone(),
                root_directory: config.root_directory.to_owned(),
            },
        }
    }

    pub fn to_json(&self) -> String {
        serde_json::to_string(&self).unwrap()
    }
}
